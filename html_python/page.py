from abc import ABCMeta, abstractmethod
import os

# Used to read the rttm generated by all the different models.
# The first element '' is to handle gold rttm
sad_prefixes = ['ldc_sad_', 'noisemes_sad_', 'tocombo_sad_', 'opensmile_sad_']
diar_prefixes = ['diartk_goldSad_', 'diartk_ldcSad_', 'diartk_tocomboSad_',
                'diartk_noisemesSad_', 'diartk_opensmileSad_']

class Page:
    __metaclass__ = ABCMeta

    @abstractmethod
    def __init__(self, output_folder, results_folder):
        # The output folder where to store the html/css files.
        self.output_folder = output_folder

        # The folders that we need to analyze/aggregate
        self.results_folder = results_folder

        if not os.path.exists(self.output_folder):
            os.makedirs(self.output_folder)

    @abstractmethod
    def write_statistics(self):
        raise NotImplementedError('subclasses must override write_statistics()!')

    @abstractmethod
    def close(self):
        raise NotImplementedError('subclasses must override close()!')
